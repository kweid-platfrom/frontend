import { OpenAI } from "openai";

// Define a proper test case interface
interface TestCase {
  title: string;
  description: string;
  steps: string[];
  expectedResult: string;
  status: string;
  priority: string;
  assignedTo: string;
  createdAt: string;
  updatedAt: string;
  [key: string]: any; // Allow for additional properties
}

// Initialize OpenAI client with proper typing
let openaiClient: OpenAI | null = null;

/**
 * Initialize the OpenAI client with API key
 * @param {string} apiKey - OpenAI API key
 */
export function initializeOpenAI(apiKey: string): void {
  openaiClient = new OpenAI({
    apiKey: apiKey,
  });
}

/**
 * Process a document and generate test cases using OpenAI
 * @param {ArrayBuffer} content - The document content as ArrayBuffer
 * @param {string} fileType - The MIME type of the file
 * @param {string} apiKey - OpenAI API key (optional if already initialized)
 * @returns {Promise<TestCase[]>} - Array of generated test cases
 */
export async function processDocumentWithAI(
  content: ArrayBuffer, 
  fileType: string, 
  apiKey: string
): Promise<TestCase[]> {
  try {
    // Initialize OpenAI if not already done
    if (!openaiClient && apiKey) {
      initializeOpenAI(apiKey);
    }

    if (!openaiClient) {
      throw new Error("OpenAI client is not initialized. Please provide an API key.");
    }

    // Extract text from document based on file type
    let extractedText = "";

    if (
      fileType.includes("wordprocessingml") ||
      fileType.includes("docx") ||
      fileType.includes("doc")
    ) {
      // Word document
      const mammoth = await import("mammoth");
      const result = await mammoth.extractRawText({ arrayBuffer: content });
      extractedText = result.value;
    } else if (fileType.includes("pdf")) {
      // For PDF we would need a PDF parsing library
      // This is a placeholder, in a real application you'd use a PDF parser
      throw new Error("PDF parsing not implemented. Please use a text or Word document.");
    } else {
      // Text file or other format
      const decoder = new TextDecoder("utf-8");
      extractedText = decoder.decode(content);
    }

    // Call OpenAI to analyze text and generate test cases
    const testCases = await analyzeTextAndGenerateTestCases(extractedText);

    return testCases;
  } catch (error) {
    console.error("Error processing document:", error);
    throw error;
  }
}

/**
 * Generate test cases from a user prompt using OpenAI
 * @param {string} prompt - The user's prompt
 * @param {string} apiKey - OpenAI API key (optional if already initialized)
 * @returns {Promise<TestCase[]>} - Array of generated test cases
 */
export async function generateTestCasesFromPrompt(
  prompt: string, 
  apiKey: string
): Promise<TestCase[]> {
  try {
    // Initialize OpenAI if not already done
    if (!openaiClient && apiKey) {
      initializeOpenAI(apiKey);
    }

    if (!openaiClient) {
      throw new Error("OpenAI client is not initialized. Please provide an API key.");
    }

    // Call OpenAI to generate test cases from prompt
    const testCases = await analyzeTextAndGenerateTestCases(prompt, true);

    return testCases;
  } catch (error) {
    console.error("Error generating test cases from prompt:", error);
    throw error;
  }
}

/**
 * Analyze text and generate test cases using OpenAI
 * @param {string} text - The text to analyze
 * @param {boolean} isPrompt - Whether the text is a direct prompt
 * @returns {Promise<TestCase[]>} - Array of generated test cases
 */
async function analyzeTextAndGenerateTestCases(
  text: string, 
  isPrompt: boolean = false
): Promise<TestCase[]> {
  if (!openaiClient) {
    throw new Error("OpenAI client is not initialized");
  }

  // Prepare system message based on whether this is a prompt or document
  const systemMessage = isPrompt
    ? "You are a QA specialist who creates detailed test cases from user requirements."
    : "You are a QA specialist who analyzes documents and extracts features to create comprehensive test cases.";

  // Create the content prompt
  const contentPrompt = isPrompt
    ? `Create a detailed test case for the following requirement: "${text}"`
    : `Analyze the following document and create 3-5 comprehensive test cases for the key features described: "${text.substring(0, 8000)}..."`;

  // Define the structure we want for our test cases
  const structurePrompt = `
Return your response as JSON array of test cases with the following structure for each test case:
{
  "title": "Brief descriptive title",
  "description": "Detailed description of what this test verifies",
  "steps": ["Step 1", "Step 2", "Step 3", ...],
  "expectedResult": "What should happen when the test is successful",
  "status": "Pending",
  "priority": "High/Medium/Low based on feature criticality",
  "assignedTo": "",
  "createdAt": "Current timestamp as ISO string",
  "updatedAt": "Current timestamp as ISO string"
}

Create test cases that are practical, detailed, and would help catch bugs in a real application.`;

  try {
    // Create completion with OpenAI
    const response = await openaiClient.chat.completions.create({
      model: "gpt-4o",  // Can be configured based on needs
      messages: [
        { role: "system", content: systemMessage },
        { role: "user", content: contentPrompt + "\n\n" + structurePrompt }
      ],
      temperature: 0.7,
      max_tokens: 4000,
      response_format: { type: "json_object" }
    });

    // Parse the JSON response
    const content = response.choices[0].message.content;
    if (!content) {
      throw new Error("Empty response from OpenAI");
    }
    
    const parsedResponse = JSON.parse(content);
    
    // Extract test cases from the response with proper typing
    let testCases: TestCase[] = [];
    
    if (Array.isArray(parsedResponse)) {
      testCases = parsedResponse as TestCase[];
    } else if (parsedResponse.testCases && Array.isArray(parsedResponse.testCases)) {
      testCases = parsedResponse.testCases as TestCase[];
    } else {
      // Handle case where AI didn't return expected format
      throw new Error("OpenAI did not return test cases in the expected format");
    }

    // Ensure all test cases have correct date formats
    testCases = testCases.map(testCase => {
      return {
        ...testCase,
        createdAt: testCase.createdAt || new Date().toISOString(),
        updatedAt: testCase.updatedAt || new Date().toISOString()
      };
    });

    return testCases;
  } catch (error) {
    console.error("Error calling OpenAI API:", error);
    const errorMessage = error instanceof Error ? error.message : "Unknown error";
    throw new Error(`Failed to generate test cases: ${errorMessage}`);
  }
}

/**
 * Export test cases to a specified format
 * @param {TestCase[]} testCases - Array of test cases
 * @param {string} format - Export format (json, csv, markdown)
 * @returns {string} - Formatted test cases
 */
export function exportTestCases(testCases: TestCase[], format: string = "json"): string {
  switch (format.toLowerCase()) {
    case "json":
      return JSON.stringify(testCases, null, 2);

    case "csv":
      return convertTestCasesToCSV(testCases);

    case "markdown":
      return convertTestCasesToMarkdown(testCases);

    default:
      return JSON.stringify(testCases, null, 2);
  }
}

/**
 * Convert test cases to CSV format
 * @param {TestCase[]} testCases - Array of test cases
 * @returns {string} - CSV string
 */
function convertTestCasesToCSV(testCases: TestCase[]): string {
  if (!testCases || testCases.length === 0) return "";

  // Get headers from first test case
  const headers = Object.keys(testCases[0]);
  const csvRows = [headers.join(",")];

  // Add each test case as a row
  for (const testCase of testCases) {
    const values = headers.map((header) => {
      const value = testCase[header];

      // Handle special cases
      if (Array.isArray(value)) {
        return `"${value.join("; ")}"`;
      } else if (value instanceof Date) {
        return value.toISOString();
      } else if (typeof value === "string") {
        // Escape quotes and wrap in quotes
        return `"${value.replace(/"/g, '""')}"`;
      }

      return value;
    });

    csvRows.push(values.join(","));
  }

  return csvRows.join("\n");
}

/**
 * Convert test cases to Markdown format
 * @param {TestCase[]} testCases - Array of test cases
 * @returns {string} - Markdown string
 */
function convertTestCasesToMarkdown(testCases: TestCase[]): string {
  if (!testCases || testCases.length === 0) return "";

  let markdown = "# Generated Test Cases\n\n";

  testCases.forEach((testCase, index) => {
    markdown += `## ${index + 1}. ${testCase.title}\n\n`;
    markdown += `**Description:** ${testCase.description}\n\n`;
    markdown += `**Priority:** ${testCase.priority}\n\n`;
    markdown += `**Status:** ${testCase.status}\n\n`;

    markdown += "### Steps:\n";
    testCase.steps.forEach((step, stepIndex) => {
      markdown += `${stepIndex + 1}. ${step}\n`;
    });

    markdown += "\n";
    markdown += `**Expected Result:** ${testCase.expectedResult}\n\n`;

    if (testCase.assignedTo) {
      markdown += `**Assigned To:** ${testCase.assignedTo}\n\n`;
    }

    markdown += `**Created:** ${testCase.createdAt}\n\n`;
    markdown += `**Updated:** ${testCase.updatedAt}\n\n`;

    markdown += "---\n\n";
  });

  return markdown;
}