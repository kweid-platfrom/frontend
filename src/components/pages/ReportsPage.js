// pages/Reports.jsx - Enhanced with Bulk Actions & Pagination
'use client';

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { useApp } from '../../context/AppProvider';
import { useReports } from '../../hooks/useReports';
import ReportTable from '../../components/report/ReportTable';
import GenerateReportModal from '../../components/report/GenerateReportModal';
import ReportViewerModal from '../../components/report/ReportViewerModal';
import ScheduleModal from '../../components/report/ScheduleModal';
import EnhancedBulkActionsBar from '../../components/common/EnhancedBulkActionsBar';
import Pagination from '../../components/common/Pagination';
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Calendar, Clock, FileText, RefreshCw, X, Filter } from 'lucide-react';

const Reports = () => {
    const { state } = useApp();
    const { 
        reports, 
        schedules,
        loading, 
        filters, 
        setFilters, 
        reportTypes, 
        hasPermission,
        generateReport,
        updateReportStatus,
        deleteReport,
        processDueSchedules
    } = useReports();
    
    const { suites } = state;
    
    // Modal States
    const [generateModalOpen, setGenerateModalOpen] = useState(false);
    const [scheduleModalOpen, setScheduleModalOpen] = useState(false);
    const [viewModalOpen, setViewModalOpen] = useState(false);
    const [selectedReport, setSelectedReport] = useState(null);
    
    // UI States
    const [showScheduleInfo, setShowScheduleInfo] = useState(true);
    const [isRefreshing, setIsRefreshing] = useState(false);
    const [showFilters, setShowFilters] = useState(false);
    
    // Bulk Actions & Pagination State
    const [selectedItems, setSelectedItems] = useState([]);
    const [currentPage, setCurrentPage] = useState(1);
    const [itemsPerPage, setItemsPerPage] = useState(10);
    const [loadingActions, setLoadingActions] = useState([]);

    // FIXED: Memoize processDueSchedules to prevent infinite loop
    const handleProcessSchedules = useCallback(() => {
        if (typeof processDueSchedules === 'function') {
            processDueSchedules();
        }
    }, [processDueSchedules]);

    // Check for due schedules on mount and when page becomes visible
    useEffect(() => {
        handleProcessSchedules();

        const handleVisibilityChange = () => {
            if (!document.hidden) {
                handleProcessSchedules();
            }
        };

        document.addEventListener('visibilitychange', handleVisibilityChange);

        return () => {
            document.removeEventListener('visibilitychange', handleVisibilityChange);
        };
    }, [handleProcessSchedules]);

    const handleRefresh = async () => {
        setIsRefreshing(true);
        try {
            await handleProcessSchedules();
        } finally {
            setTimeout(() => setIsRefreshing(false), 500);
        }
    };

    // Memoize computed values
    const activeSchedules = useMemo(() => 
        schedules.filter(s => s.active), 
        [schedules]
    );

    const hasAutoGenerated = useMemo(() => 
        reports.some(r => r.autoGenerated), 
        [reports]
    );

    const hasActiveFilters = useMemo(() => 
        filters.type !== 'all' || 
        filters.status !== 'all' || 
        filters.date || 
        filters.author || 
        filters.suite !== 'all',
        [filters]
    );

    const clearFilters = useCallback(() => {
        setFilters({
            type: 'all',
            status: 'all',
            date: '',
            author: '',
            suite: 'all'
        });
    }, [setFilters]);

    // Pagination: Get current page items
    const paginatedReports = useMemo(() => {
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        return reports.slice(startIndex, endIndex);
    }, [reports, currentPage, itemsPerPage]);

    // Reset to page 1 when filters change
    useEffect(() => {
        setCurrentPage(1);
        setSelectedItems([]);
    }, [filters]);

    // Clear selection when page changes
    useEffect(() => {
        setSelectedItems([]);
    }, [currentPage, itemsPerPage]);

    // Bulk Actions Configuration - Using only icons available in EnhancedBulkActionsBar
    const bulkActionGroups = useMemo(() => [
        {
            name: 'status',
            actions: [
                { id: 'mark-generated', label: 'Mark as Generated', icon: 'Clock', color: 'blue' },
                { id: 'mark-reviewed', label: 'Mark as Reviewed', icon: 'CheckCircle', color: 'yellow' },
                { id: 'mark-published', label: 'Mark as Published', icon: 'CheckCircle', color: 'teal' }
            ]
        },
        {
            name: 'export',
            actions: [
                { id: 'download', label: 'Download', icon: 'Download', color: 'blue' }
            ]
        },
        {
            name: 'actions',
            actions: [
                { id: 'delete', label: 'Delete', icon: 'Trash2', color: 'red', destructive: true, confirmMessage: 'Delete selected reports?' }
            ]
        }
    ], []);

    // Handle Bulk Actions
    const handleBulkAction = async (actionId, selectedReportIds, actionConfig, selectedOption) => {
        setLoadingActions(prev => [...prev, actionId]);
        
        try {
            switch (actionId) {
                case 'mark-generated':
                    for (const id of selectedReportIds) {
                        await updateReportStatus(id, 'Generated');
                    }
                    break;
                    
                case 'mark-reviewed':
                    for (const id of selectedReportIds) {
                        await updateReportStatus(id, 'Reviewed');
                    }
                    break;
                    
                case 'mark-published':
                    for (const id of selectedReportIds) {
                        await updateReportStatus(id, 'Published');
                    }
                    break;
                    
                case 'download':
                    selectedReportIds.forEach(id => {
                        const report = reports.find(r => r.id === id);
                        if (report) {
                            const dataStr = JSON.stringify(report.data, null, 2);
                            const dataBlob = new Blob([dataStr], { type: 'application/json' });
                            const url = URL.createObjectURL(dataBlob);
                            const link = document.createElement('a');
                            link.href = url;
                            link.download = `${report.name.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.json`;
                            document.body.appendChild(link);
                            link.click();
                            document.body.removeChild(link);
                            URL.revokeObjectURL(url);
                        }
                    });
                    break;
                    
                case 'delete':
                    for (const id of selectedReportIds) {
                        await deleteReport(id);
                    }
                    break;
                    
                default:
                    console.warn('Unknown action:', actionId);
            }
        } catch (error) {
            console.error('Bulk action failed:', error);
            alert('Failed to complete bulk action');
        } finally {
            setLoadingActions(prev => prev.filter(a => a !== actionId));
        }
    };

    // Handle Selection
    const handleSelectAll = useCallback((checked) => {
        if (checked) {
            setSelectedItems(paginatedReports.map(r => r.id));
        } else {
            setSelectedItems([]);
        }
    }, [paginatedReports]);

    const handleSelectItem = useCallback((reportId, checked) => {
        setSelectedItems(prev => {
            if (checked) {
                return [...prev, reportId];
            } else {
                return prev.filter(id => id !== reportId);
            }
        });
    }, []);

    const handleClearSelection = useCallback(() => {
        setSelectedItems([]);
    }, []);

    return (
        <div className="min-h-screen bg-background">
            <div className="max-w-full mx-auto py-6 px-4 sm:px-6 lg:px-8">
                {/* Header */}
                <div className="mb-6">
                    <div className="flex items-center justify-between mb-2">
                        <div>
                            <h1 className="text-3xl font-bold text-foreground">Reports</h1>
                            <p className="text-sm text-muted-foreground mt-1">
                                {reports.length} report{reports.length !== 1 ? 's' : ''} available
                                {activeSchedules.length > 0 && (
                                    <span className="ml-2 text-primary">
                                        Â· {activeSchedules.length} active schedule{activeSchedules.length !== 1 ? 's' : ''}
                                    </span>
                                )}
                            </p>
                        </div>
                        
                        {/* Action Buttons */}
                        <div className="flex items-center gap-2">
                            {hasPermission() && (
                                <>
                                    <button
                                        onClick={() => setScheduleModalOpen(true)}
                                        className="hidden sm:inline-flex items-center gap-2 px-3 py-1.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors"
                                    >
                                        <Clock className="h-4 w-4" /> 
                                        Schedules
                                    </button>
                                    <button
                                        onClick={() => setGenerateModalOpen(true)}
                                        className="inline-flex items-center gap-2 px-3 py-1.5 text-sm font-medium text-white bg-primary border border-transparent rounded-md hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors"
                                    >
                                        <FileText className="h-4 w-4" /> 
                                        Generate
                                    </button>
                                </>
                            )}
                            <button
                                onClick={handleRefresh}
                                disabled={isRefreshing}
                                className="inline-flex items-center gap-2 px-3 py-1.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                            >
                                <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />
                                <span className="hidden sm:inline">Refresh</span>
                            </button>
                        </div>
                    </div>

                    {/* Stats Cards */}
                    <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 mt-4">
                        <div className="bg-card border border-border rounded-lg p-4">
                            <div className="flex items-center justify-between">
                                <div>
                                    <p className="text-sm text-muted-foreground">Total Reports</p>
                                    <p className="text-2xl font-bold text-foreground">{reports.length}</p>
                                </div>
                                <FileText className="h-8 w-8 text-primary opacity-50" />
                            </div>
                        </div>
                        
                        <div className="bg-card border border-border rounded-lg p-4">
                            <div className="flex items-center justify-between">
                                <div>
                                    <p className="text-sm text-muted-foreground">Auto-Generated</p>
                                    <p className="text-2xl font-bold text-foreground">
                                        {reports.filter(r => r.autoGenerated).length}
                                    </p>
                                </div>
                                <Calendar className="h-8 w-8 text-success opacity-50" />
                            </div>
                        </div>
                        
                        <div className="bg-card border border-border rounded-lg p-4">
                            <div className="flex items-center justify-between">
                                <div>
                                    <p className="text-sm text-muted-foreground">Active Schedules</p>
                                    <p className="text-2xl font-bold text-foreground">{activeSchedules.length}</p>
                                </div>
                                <Clock className="h-8 w-8 text-info opacity-50" />
                            </div>
                        </div>
                    </div>
                </div>

                {/* Auto-Generation Info Banner */}
                {showScheduleInfo && (activeSchedules.length > 0 || hasAutoGenerated) && (
                    <Alert className="mb-6 bg-primary/10 border-primary/20">
                        <FileText className="h-4 w-4 text-primary" />
                        <AlertDescription className="flex items-start justify-between">
                            <div className="flex-1">
                                <p className="text-sm text-foreground">
                                    {hasAutoGenerated && 'Auto-generated reports are created when test runs complete. '}
                                    {activeSchedules.length > 0 && 
                                        `You have ${activeSchedules.length} scheduled report${activeSchedules.length > 1 ? 's' : ''} that generate automatically.`
                                    }
                                </p>
                            </div>
                            <button
                                onClick={() => setShowScheduleInfo(false)}
                                className="text-primary hover:text-primary/80 ml-4 transition-colors"
                            >
                                <X className="h-4 w-4" />
                            </button>
                        </AlertDescription>
                    </Alert>
                )}

                {/* Filters Section */}
                <div className="bg-card border border-border rounded-lg shadow-sm mb-6">
                    <div className="px-4 py-3 border-b border-border flex items-center justify-between">
                        <div className="flex items-center gap-2">
                            <Filter className="h-4 w-4 text-muted-foreground" />
                            <h3 className="text-sm font-medium text-foreground">Filters</h3>
                            {hasActiveFilters && (
                                <span className="px-2 py-0.5 text-xs bg-primary/10 text-primary rounded-full">
                                    Active
                                </span>
                            )}
                        </div>
                        <Button
                            onClick={() => setShowFilters(!showFilters)}
                            variant="ghost"
                            size="sm"
                            className="text-muted-foreground hover:text-foreground"
                        >
                            {showFilters ? 'Hide' : 'Show'}
                        </Button>
                    </div>
                    
                    {showFilters && (
                        <div className="p-4">
                            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                                <div>
                                    <label className="text-xs text-muted-foreground mb-1.5 block">Type</label>
                                    <Select
                                        value={filters.type}
                                        onValueChange={(value) => setFilters({ ...filters, type: value })}
                                    >
                                        <SelectTrigger className="w-full">
                                            <SelectValue placeholder="All Types" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            <SelectItem value="all">All Types</SelectItem>
                                            {reportTypes.map((type) => (
                                                <SelectItem key={type} value={type}>
                                                    {type}
                                                </SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>
                                </div>

                                <div>
                                    <label className="text-xs text-muted-foreground mb-1.5 block">Status</label>
                                    <Select
                                        value={filters.status}
                                        onValueChange={(value) => setFilters({ ...filters, status: value })}
                                    >
                                        <SelectTrigger className="w-full">
                                            <SelectValue placeholder="All Statuses" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            <SelectItem value="all">All Statuses</SelectItem>
                                            <SelectItem value="Generated">Generated</SelectItem>
                                            <SelectItem value="Reviewed">Reviewed</SelectItem>
                                            <SelectItem value="Published">Published</SelectItem>
                                        </SelectContent>
                                    </Select>
                                </div>

                                <div>
                                    <label className="text-xs text-muted-foreground mb-1.5 block">Date</label>
                                    <Input
                                        type="date"
                                        value={filters.date}
                                        onChange={(e) => setFilters({ ...filters, date: e.target.value })}
                                        className="w-full"
                                    />
                                </div>

                                <div>
                                    <label className="text-xs text-muted-foreground mb-1.5 block">Author</label>
                                    <Input
                                        value={filters.author}
                                        onChange={(e) => setFilters({ ...filters, author: e.target.value })}
                                        placeholder="Search by author..."
                                        className="w-full"
                                    />
                                </div>

                                <div>
                                    <label className="text-xs text-muted-foreground mb-1.5 block">Suite</label>
                                    <Select
                                        value={filters.suite}
                                        onValueChange={(value) => setFilters({ ...filters, suite: value })}
                                    >
                                        <SelectTrigger className="w-full">
                                            <SelectValue placeholder="All Suites" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            <SelectItem value="all">All Suites</SelectItem>
                                            {suites.testSuites.map((suite) => (
                                                <SelectItem key={suite.id} value={suite.id}>
                                                    {suite.name}
                                                </SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>
                                </div>

                                {hasActiveFilters && (
                                    <div className="flex items-end">
                                        <Button
                                            variant="outline"
                                            onClick={clearFilters}
                                            className="w-full"
                                        >
                                            Clear Filters
                                        </Button>
                                    </div>
                                )}
                            </div>
                        </div>
                    )}
                </div>

                {/* Reports Table */}
                <div className="bg-card border border-border rounded-lg shadow-sm overflow-hidden">
                    <ReportTable
                        reports={paginatedReports}
                        loading={loading}
                        onView={(report) => {
                            setSelectedReport(report);
                            setViewModalOpen(true);
                        }}
                        onUpdateStatus={updateReportStatus}
                        onDelete={deleteReport}
                        hasPermission={hasPermission()}
                        selectedItems={selectedItems}
                        onSelectAll={handleSelectAll}
                        onSelectItem={handleSelectItem}
                    />
                    
                    {/* Pagination */}
                    {!loading && reports.length > 0 && (
                        <Pagination
                            currentPage={currentPage}
                            totalItems={reports.length}
                            itemsPerPage={itemsPerPage}
                            onPageChange={setCurrentPage}
                            onItemsPerPageChange={setItemsPerPage}
                        />
                    )}
                </div>

                {/* Bulk Actions Bar */}
                {selectedItems.length > 0 && hasPermission() && (
                    <EnhancedBulkActionsBar
                        selectedItems={selectedItems}
                        onClearSelection={handleClearSelection}
                        actionGroups={bulkActionGroups}
                        onAction={handleBulkAction}
                        loadingActions={loadingActions}
                    />
                )}

                {/* Generate Report Modal */}
                <GenerateReportModal
                    open={generateModalOpen}
                    onOpenChange={setGenerateModalOpen}
                    reportTypes={reportTypes}
                    suites={suites.testSuites}
                    sprints={state.sprints?.sprints || []}
                    testRuns={state.testRuns?.testRuns || []}
                    onGenerate={generateReport}
                />

                {/* Schedule Management Modal */}
                <ScheduleModal
                    open={scheduleModalOpen}
                    onOpenChange={setScheduleModalOpen}
                    schedules={schedules}
                    reportTypes={reportTypes}
                />

                {/* Report Viewer Modal */}
                <ReportViewerModal
                    open={viewModalOpen}
                    onOpenChange={setViewModalOpen}
                    report={selectedReport}
                    onUpdateStatus={updateReportStatus}
                    hasPermission={hasPermission()}
                />
            </div>
        </div>
    );
};

export default Reports;